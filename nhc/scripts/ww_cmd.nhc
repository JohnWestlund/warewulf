# NHC - Warewulf Command/Subprogram Checks
#
# Michael Jennings <mej@lbl.gov>
# 19 March 2014
#
# $Id$
#

# Check the output of a command for one or more matching strings.  A
# required return code may also be supplied.
function check_cmd_output() {
    local CMD_TIMEOUT=5 CMD_RETVAL CHECKNAME="$FUNCNAME" OUTPUT_VAR CMD_START_TS=$SECONDS
    local IFS PID TIMER RET CMD
    local LINENO=0 MATCH_CNT=0 NEG_MATCH_CNT=0 i
    local -a CMD_LIST LINES MATCHES MATCHED

    MATCHES=( )
    OPTIND=1
    while getopts ":C:O:e:m:r:t:" OPTION ; do
        case "$OPTION" in
            C) CHECKNAME="$OPTARG" ;;  # INTERNAL USE ONLY
            O) OUTPUT_VAR="$OPTARG" ;;  # INTERNAL USE ONLY
            e) CMD="$OPTARG" ;;
            m) MATCHES[${#MATCHES[*]}]="$OPTARG" ;;
            r) CMD_RETVAL="$OPTARG" ;;
            t) CMD_TIMEOUT="$OPTARG" ;;
            :) die 1 "$CHECKNAME:  Option -$OPTARG requires an argument." ; return 1 ;;
            \?) die 1 "$CHECKNAME:  Invalid option:  -$OPTARG" ; return 1 ;;
        esac
    done
    shift $((OPTIND-1))

    if [[ -n "$CMD" ]]; then
        CMD_LIST=( $CMD )
    else
        CMD_LIST=( "$@" )
        CMD="${CMD_LIST[*]}"
    fi

    if [[ -z "${CMD_LIST[*]}" ]]; then
        die 1 "$CHECKNAME:  Syntax error:  No command specified"
        return 1
    elif [[ -n "$CMD_TIMEOUT" && $CMD_TIMEOUT -gt $TIMEOUT ]]; then
        die 1 "$CHECKNAME:  Command timeout $CMD_TIMEOUT exceeds NHC timeout $TIMEOUT"
        return 1
    fi

    # Initialize a parallel array for tracking which matches have been found.
    for ((i = 0; i < ${#MATCHES[*]}; i++)); do
        if [[ "${MATCHES[$i]:0:1}" = '!' ]]; then
            MATCHED[$i]=1
            ((NEG_MATCH_CNT++))
        else
            MATCHED[$i]=0
        fi
    done

    # FIXME:  We can't do this as a pipeline because the contents of
    # the while loop will execute in a subshell, and all our variable
    # values will get lost.
    # nhc_cmd_with_timeout $CMD_TIMEOUT "${CMD_LIST[@]}" | while read LINE ; do
    #
    # Once we can drop support for RHEL4 and 5, we can use "coproc"
    # For now, this means we have to run the command and grab all its
    # output all in 1 go, so commands with lengthy output must be
    # avoided.
    IFS=$'\n'
    LINES=( $(nhc_cmd_with_timeout $CMD_TIMEOUT "${CMD_LIST[@]}") )
    RET=$?
    if [[ -n "$OUTPUT_VAR" ]]; then
        eval "$OUTPUT_VAR"'=( "${LINES[@]}" )'
    fi
    IFS=$' \t\n'

    # Iterate through $LINES[] array to gather process data.
    for ((LINENO = 0; LINENO <= ${#LINES[*]}; LINENO++)); do
        for ((i = 0; i < ${#MATCHES[*]}; i++)); do
            if [[ "${MATCHES[$i]:0:1}" = '!' ]]; then
                # Match expression is negated.  Fail if the line matches this expression.
                if mcheck "${LINES[$LINENO]}" "${MATCHES[$i]:1}" ; then
                    die 1 "$CHECKNAME:  Command \"$CMD\" output line $((LINENO+1)) matches \"${MATCHES[$i]:1}\"."
                    return 1
                fi
            elif [ ${MATCHED[$i]} -eq 0 ] && mcheck "${LINES[$LINENO]}" "${MATCHES[$i]}" ; then
                MATCHED[$i]=1
                ((MATCH_CNT++))
                if [[ $MATCH_CNT == ${#MATCHED[*]} ]]; then
                    # All match expression(s) are positive and have
                    # matched successfully.  Stop processing output.
                    break
                fi
            fi
        done
    done

    # None of the negated matches matched, so add them to our success count.
    ((MATCH_CNT += NEG_MATCH_CNT))

    if [[ $RET -ne ${CMD_RETVAL:-0} ]]; then
        if [[ $SECONDS -ge $((CMD_START_TS+CMD_TIMEOUT)) && $RET -eq 143 ]]; then
            # A return code of 143 (128+15) means that the process received SIGTERM,
            # probably from our command watchdog timer.  Detect that and make it clearer.
            die 1 "$CHECKNAME:  Command \"$CMD\" timed out after $CMD_TIMEOUT seconds and was terminated"
            return 1
        fi
        die 1 "$CHECKNAME:  Command \"$CMD\" returned $RET${CMD_RETVAL:+ (expecting $CMD_RETVAL)}"
        return 1
    elif [[ $MATCH_CNT == ${#MATCHES[*]} ]]; then
        # All matches (some positive, some negative) were successful.  Return.
        return 0
    fi

    # At least one expression failed to match.  Locate the first such expression.
    if [[ $MATCH_CNT == 0 && ${#MATCHES[*]} == 1 ]]; then
        # Special case for cleaner output.
        die 1 "$CHECKNAME:  Command \"$CMD\" output failed to match \"${MATCHES[0]}\"."
        return 1
    fi

    for ((i = 0; i < ${#MATCHES[*]}; i++)); do
        if [[ ${MATCHED[$i]} == 0 ]]; then
            die 1 "$CHECKNAME:  Command \"$CMD\" output matched $MATCH_CNT/${#MATCHES[*]} patterns.  First failed match:  \"${MATCHES[$i]}\"."
            return 1
        fi
    done
    die 2 "No unmatched expressions found for command \"$CMD\" output but $CHECKNAME() failed to terminate."
    return 2
}

# Execute a command and evaluate only its return code.  Output is
# suppressed.  Granted, this could be done via check_cmd_output()
# above, but for programs which generate huge amounts of output (like
# a tar, or a compilation), suppressing output or redirecting it to
# /dev/null is immensely faster than parsing it in bash.
function check_cmd_status() {
    local CMD_TIMEOUT=5 CMD_RETVAL PID TIMER RET CHECKNAME="$FUNCNAME" CMD_START_TS=$SECONDS

    OPTIND=1
    while getopts ":C:r:t:" OPTION ; do
        case "$OPTION" in
            C) CHECKNAME="$OPTARG" ;;  # INTERNAL USE ONLY
            r) CMD_RETVAL="$OPTARG" ;;
            t) CMD_TIMEOUT="$OPTARG" ;;
            :) die 1 "$CHECKNAME:  Option -$OPTARG requires an argument." ; return 1 ;;
            \?) die 1 "$CHECKNAME:  Invalid option:  -$OPTARG" ; return 1 ;;
        esac
    done
    shift $((OPTIND-1))

    if [[ -n "$CMD_TIMEOUT" && $CMD_TIMEOUT -gt $TIMEOUT ]]; then
        die 1 "$CHECKNAME:  Command timeout $CMD_TIMEOUT exceeds NHC timeout $TIMEOUT"
        return 1
    fi

    "$@" </dev/null >&/dev/null &
    PID=$!
    nhcmain_watchdog_timer "$CMD_TIMEOUT" "$PID" </dev/null >&/dev/null &
    wait $PID
    RET=$?

    if [[ $RET -ne ${CMD_RETVAL:-0} ]]; then
        if [[ $SECONDS -ge $((CMD_START_TS+CMD_TIMEOUT)) && $RET -eq 143 ]]; then
            # A return code of 143 (128+15) means that the process received SIGTERM,
            # probably from our command watchdog timer.  Detect that and make it clearer.
            die 1 "$CHECKNAME:  Command \"$*\" timed out after $CMD_TIMEOUT seconds and was terminated"
            return 1
        fi
        die 1 "$CHECKNAME:  Command \"$*\" returned $RET${CMD_RETVAL:+ (expecting $CMD_RETVAL)}"
        return 1
    fi
    return 0
}
