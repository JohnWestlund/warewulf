# NHC - Warewulf File Checks
#
# Michael Jennings <mej@lbl.gov>
# 01 April 2013
#
# $Id$
#

# Check to make sure the contents of a file ($1) match the expressions
# given ($2-).  The check fails if any of the supplied expressions
# fail to match the file's contents.  Matching is done line by line.
function check_file_contents() {
    local FILENAME="$1"
    local LINE LINENO=0 MATCH_CNT=0 NEG_MATCH_CNT=0 i
    local -a MATCHES MATCHED

    # Create an array of all matches for which we must search.
    shift
    MATCHES=( "$@" )

    # Initialize a parallel array for tracking which matches have been found.
    for ((i = 0; i < ${#MATCHES[*]}; i++)); do
        if [[ "${MATCHES[$i]:0:1}" = '!' ]]; then
            MATCHED[$i]=1
            ((NEG_MATCH_CNT++))
        else
            MATCHED[$i]=0
        fi
    done

    # Read the file line by line.
    while read LINE ; do
        ((LINENO++))
        for ((i = 0; i < ${#MATCHES[*]}; i++)); do
            if [[ "${MATCHES[$i]:0:1}" = '!' ]]; then
                # Match expression is negated.  Fail if the line matches this expression.
                if mcheck "$LINE" "${MATCHES[$i]:1}" ; then
                    die 1 "File \"$FILENAME\" line $LINENO matches \"${MATCHES[$i]:1}\"."
                    return 1
                fi
            elif [ ${MATCHED[$i]} -eq 0 ] && mcheck "$LINE" "${MATCHES[$i]}" ; then
                MATCHED[$i]=1
                ((MATCH_CNT++))
                if [[ $MATCH_CNT == ${#MATCHED[*]} ]]; then
                    # All match expression(s) are positive and have
                    # matched successfully.  Stop reading file.
                    return 0
                fi
            fi
        done
    done <"$FILENAME"

    # None of the negated matches matched, so add them to our success count.
    ((MATCH_CNT += NEG_MATCH_CNT))
    if [[ $MATCH_CNT == ${#MATCHES[*]} ]]; then
        # All matches (some positive, some negative) were successful.  Return.
        return 0
    fi

    # At least one expression failed to match.  Locate the first such expression.
    if [[ $MATCH_CNT == 0 && ${#MATCHES[*]} == 1 ]]; then
        # Special case for cleaner output.
        die 1 "File \"$FILENAME\" failed to match \"${MATCHES[0]}\"."
        return 1
    fi

    for ((i = 0; i < ${#MATCHES[*]}; i++)); do
        if [[ ${MATCHED[$i]} == 0 ]]; then
            die 1 "File \"$FILENAME\" matched $MATCH_CNT/${#MATCHES[*]} patterns.  First failed match:  \"${MATCHES[$i]}\"."
            return 1
        fi
    done
    die 2 "No unmatched expressions found for \"$FILENAME\" but ${FUNCNAME[0]}() failed to terminate."
    return 2
}

