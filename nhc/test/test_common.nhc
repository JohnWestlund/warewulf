# Tests for common.nhc
#
# $Id$
#

plan $((7+5+8+5+4)) "common.nhc" && {
    is "`type -t mcheck_regexp 2>&1`" 'function' 'mcheck_regexp() loaded properly'
    is "`type -t mcheck_range 2>&1`" 'function' 'mcheck_regexp() loaded properly'
    is "`type -t mcheck_glob 2>&1`" 'function' 'mcheck_glob() loaded properly'
    is "`type -t mcheck 2>&1`" 'function' 'mcheck() loaded properly'
    is "`type -t nhc_load_conf 2>&1`" 'function' 'nhc_load_conf() loaded properly'
    is "`type -t nhc_common_load_passwd 2>&1`" 'function' 'nhc_common_load_passwd() loaded properly'
    is "`type -t nhc_common_get_uid 2>&1`" 'function' 'nhc_common_get_uid() loaded properly'

    mcheck "This is a test." '/test/'
    is $? 0 "Basic regexp match via mcheck()"
    mcheck "some.hostname.com" '/\./'
    is $? 0 "Metacharacter escape regexp match via mcheck()"
    mcheck "hostname" '/\./'
    is $? 1 "Failed regexp match via mcheck()"
    mcheck "host.example.com" '/example\.(com|net|org)$/'
    is $? 0 "Extended regexp match via mcheck()"
    mcheck "1 2 3 4 5" '/(^| )1/'
    is $? 0 "Boundary case regexp match via mcheck()"

    mcheck "n0021.testbed" '{n00[00-59].testbed}'
    is $? 0 "Basic range match via mcheck()"
    mcheck "n0000.cluster" '{n0000.cluster}'
    is $? 0 "Range check via mcheck(), simple exact name match"
    mcheck "n0100.cluster" '{n00[00-99].cluster}'
    is $? 1 "Failed range match via mcheck()"
    mcheck "n0005.cluster" '{n000[5-5].cluster}'
    is $? 0 "Range check via mcheck(), range containing only 1 node"
    mcheck "n0200.cluster" '{n[00-10]00.cluster}'
    is $? 0 "Range check via mcheck(), range in non-standard location"
    mcheck "fx-r0-n42" '{fx-r0-n[0-42]}'
    is $? 0 "Range check via mcheck(), range with unbalanced lengths"
    mcheck "idplx-r2-n21" '{idplx-r0-n[0-42],idplx-r1-n[0-42],idplx-r2-n[0-42],idplx-r3-n[0-42]}'
    is $? 0 "Range check via mcheck(), multiple comma-delimited ranges"
    mcheck "idplx-r4-n04" '{idplx-r0-n[0-42],idplx-r1-n[0-42],idplx-r2-n[0-42],idplx-r3-n[0-42]}'
    is $? 1 "Failed range check via mcheck(), multiple comma-delimited ranges"

    mcheck "n0000.testbed" 'n*.*'
    is $? 0 "Basic glob match via mcheck()"
    mcheck "some*glob" '*\**'
    is $? 0 "Metacharacter escape glob match via mcheck()"
    mcheck "hostname" '\*'
    is $? 1 "Failed glob match via mcheck()"
    mcheck "host.example.com" '*.?xample.[CcNnOo][OoEeRr][MmTtGg]'
    is $? 0 "Bracket glob match via mcheck()"
    mcheck "1 2 3 4 5" '*1*'
    is $? 0 "Boundary case glob match via mcheck()"

    mcheck_regexp 'Testing' '/^Testing$/'
    is $? 1 "Direct usage of mcheck_regexp() with slashes (wrong)"
    mcheck_regexp 'Testing' '^Testing$'
    is $? 0 "Direct usage of mcheck_regexp() without slashes (correct)"
    mcheck_range 'n0000.foo' '{n000[0-9].foo}'
    is $? 1 "Direct usage of mcheck_range() with braces (wrong)"
    mcheck_range 'n0000.foo' 'n000[0-9].foo'
    is $? 0 "Direct usage of mcheck_range() without braces (correct)"
} ; unplan
