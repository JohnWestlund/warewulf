# Tests for ww_dmi.nhc
#
# $Id: test_ww_dmi.nhc 1299 2013-03-12 00:44:02Z mej $
#

function populate_dmi_data() {
    # A snippit real DMI data from a cluster node
    DMI_RAW_DATA=([0]="# dmidecode 2.11"
	[1]="SMBIOS 2.4 present."
	[2]="64 structures occupying 3240 bytes."
	[3]="Table at 0xCFB9C000."
	[4]="Handle 0xDA00, DMI type 218, 11 bytes"
	[5]="OEM-specific Type"
	[6]="	Header and Data:"
	[7]="		DA 0B 00 DA B2 00 17 00 0E 20 00"
	[8]="Handle 0x0000, DMI type 0, 24 bytes"
	[9]="BIOS Information"
	[10]="	Vendor: Dell Inc."
	[11]="	Version: 2.0.1"
	[12]="	Release Date: 10/27/2007"
	[13]="	Address: 0xF0000"
	[14]="	Runtime Size: 64 kB"
	[15]="	ROM Size: 1024 kB"
	[16]="	Characteristics:"
	[17]="		ISA is supported"
	[18]="		PCI is supported"
	[19]="		PNP is supported"
	[20]="		BIOS is upgradeable"
	[21]="		BIOS shadowing is allowed"
	[22]="		ESCD support is available"
	[23]="		Boot from CD is supported"
	[24]="		Selectable boot is supported"
	[25]="		EDD is supported"
	[26]="		Japanese floppy for Toshiba 1.2 MB is supported (int 13h)"
	[27]="		5.25\"/360 kB floppy services are supported (int 13h)"
	[28]="		5.25\"/1.2 MB floppy services are supported (int 13h)"
	[29]="		3.5\"/720 kB floppy services are supported (int 13h)"
	[30]="		Print screen service is supported (int 5h)"
	[31]="		8042 keyboard services are supported (int 9h)"
	[32]="		Serial services are supported (int 14h)"
	[33]="		Printer services are supported (int 17h)"
	[34]="		CGA/mono video services are supported (int 10h)"
	[35]="		ACPI is supported"
	[36]="		USB legacy is supported"
	[37]="		BIOS boot specification is supported"
	[38]="		Function key-initiated network boot is supported"
	[39]="		Targeted content distribution is supported"
	[40]="	BIOS Revision: 0.1"
	[41]="Handle 0x0100, DMI type 1, 27 bytes"
	[42]="System Information"
	[43]="	Manufacturer: Dell Inc."
	[44]="	Product Name: PowerEdge 1950"
	[45]="	Version: Not Specified"
	[46]="	Serial Number: 9999999"
	[47]="	UUID: 00000000-0000-0000-0000-000000000000"
	[48]="	Wake-up Type: Power Switch"
	[49]="	SKU Number: Not Specified"
	[50]="	Family: Not Specified"
	[51]="Handle 0x0200, DMI type 2, 9 bytes"
	[52]="Base Board Information"
	[53]="	Manufacturer: Dell Inc."
	[54]="	Product Name: 0TT740"
	[55]="	Version: A00"
	[56]="	Serial Number: ..00000000000000."
	[57]="	Asset Tag: Not Specified"
	[58]="Handle 0x0300, DMI type 3, 21 bytes"
	[59]="Chassis Information"
	[60]="	Manufacturer: Dell Inc."
	[61]="	Type: Rack Mount Chassis"
	[62]="	Lock: Present"
	[63]="	Version: Not Specified"
	[64]="	Serial Number: 9999999"
	[65]="	Asset Tag: Not Specified"
	[66]="	Boot-up State: Safe"
	[67]="	Power Supply State: Safe"
	[68]="	Thermal State: Safe"
	[69]="	Security Status: Unknown"
	[70]="	OEM Information: 0x00000000"
	[71]="	Height: 1 U"
	[72]="	Number Of Power Cords: Unspecified"
	[73]="	Contained Elements: 0"
	[74]="Handle 0x0400, DMI type 4, 40 bytes"
	[75]="Processor Information"
	[76]="	Socket Designation: CPU1"
	[77]="	Type: Central Processor"
	[78]="	Family: Xeon"
	[79]="	Manufacturer: Intel"
	[80]="	ID: 76 06 01 00 FF FB EB BF"
	[81]="	Signature: Type 0, Family 6, Model 23, Stepping 6"
	[82]="	Flags:"
	[83]="		FPU (Floating-point unit on-chip)"
	[84]="		VME (Virtual mode extension)"
	[85]="		DE (Debugging extension)"
	[86]="		PSE (Page size extension)"
	[87]="		TSC (Time stamp counter)"
	[88]="		MSR (Model specific registers)"
	[89]="		PAE (Physical address extension)"
	[90]="		MCE (Machine check exception)"
	[91]="		CX8 (CMPXCHG8 instruction supported)"
	[92]="		APIC (On-chip APIC hardware supported)"
	[93]="		SEP (Fast system call)"
	[94]="		MTRR (Memory type range registers)"
	[95]="		PGE (Page global enable)"
	[96]="		MCA (Machine check architecture)"
	[97]="		CMOV (Conditional move instruction supported)"
	[98]="		PAT (Page attribute table)"
	[99]="		PSE-36 (36-bit page size extension)"
	[100]="		CLFSH (CLFLUSH instruction supported)"
	[101]="		DS (Debug store)"
	[102]="		ACPI (ACPI supported)"
	[103]="		MMX (MMX technology supported)"
	[104]="		FXSR (FXSAVE and FXSTOR instructions supported)"
	[105]="		SSE (Streaming SIMD extensions)"
	[106]="		SSE2 (Streaming SIMD extensions 2)"
	[107]="		SS (Self-snoop)"
	[108]="		HTT (Multi-threading)"
	[109]="		TM (Thermal monitor supported)"
	[110]="		PBE (Pending break enabled)"
	[111]="	Version: Intel(R) Xeon(R) CPU	   E5450  @ 3.00GHz"
	[112]="	Voltage: 1.4 V"
	[113]=" External Clock: 1333 MHz"
	[114]="	Max Speed: 3600 MHz"
	[115]="	Current Speed: 3000 MHz"
	[116]="	Status: Populated, Enabled"
	[117]="	Upgrade: Socket LGA771"
	[118]=" L1 Cache Handle: 0x0700"
	[119]="	L2 Cache Handle: 0x0701"
	[120]="	L3 Cache Handle: 0x0702"
	[121]="	Serial Number: Not Specified"
	[122]="	Asset Tag: Not Specified"
	[123]="	Part Number: Not Specified"
	[124]="	Core Count: 4"
	[125]="	Core Enabled: 4"
	[126]="	Thread Count: 4"
	[127]="	Characteristics:"
	[128]="		64-bit capable"
	[129]="Handle 0x0401, DMI type 4, 40 bytes"
	[130]="Processor Information"
	[131]="	Socket Designation: CPU2"
	[132]="	Type: Central Processor"
	[133]="	Family: Xeon"
	[134]="	Manufacturer: Intel"
	[135]="	ID: 76 06 01 00 FF FB EB BF"
	[136]="	Signature: Type 0, Family 6, Model 23, Stepping 6"
	[137]="	Flags:"
	[138]="		FPU (Floating-point unit on-chip)"
	[139]="		VME (Virtual mode extension)"
	[140]="		DE (Debugging extension)"
	[141]="		PSE (Page size extension)"
	[142]="		TSC (Time stamp counter)"
	[143]="		MSR (Model specific registers)"
	[144]="		PAE (Physical address extension)"
	[145]="		MCE (Machine check exception)"
	[146]="		CX8 (CMPXCHG8 instruction supported)"
	[147]="		APIC (On-chip APIC hardware supported)"
	[148]="		SEP (Fast system call)"
	[149]="		MTRR (Memory type range registers)"
	[150]="		PGE (Page global enable)"
	[151]="		MCA (Machine check architecture)"
	[152]="		CMOV (Conditional move instruction supported)"
	[153]="		PAT (Page attribute table)"
	[154]="		PSE-36 (36-bit page size extension)"
	[155]="		CLFSH (CLFLUSH instruction supported)"
	[156]="		DS (Debug store)"
	[157]="		ACPI (ACPI supported)"
	[158]="		MMX (MMX technology supported)"
	[159]="		FXSR (FXSAVE and FXSTOR instructions supported)"
	[160]="		SSE (Streaming SIMD extensions)"
	[161]="		SSE2 (Streaming SIMD extensions 2)"
	[162]="		SS (Self-snoop)"
	[163]="		HTT (Multi-threading)"
	[164]="		TM (Thermal monitor supported)"
	[165]="		PBE (Pending break enabled)"
	[166]="	Version: Intel(R) Xeon(R) CPU	   E5450  @ 3.00GHz"
	[167]="	Voltage: 1.4 V"
	[168]=" External Clock: 1333 MHz"
	[169]="	Max Speed: 3600 MHz"
	[170]="	Current Speed: 3000 MHz"
	[171]="	Status: Populated, Idle"
	[172]="	Upgrade: Socket LGA771"
	[173]=" L1 Cache Handle: 0x0703"
	[174]="	L2 Cache Handle: 0x0704"
	[175]="	L3 Cache Handle: 0x0705"
	[176]="	Serial Number: Not Specified"
	[177]="	Asset Tag: Not Specified"
	[178]="	Part Number: Not Specified"
	[179]="	Core Count: 4"
	[180]="	Core Enabled: 4"
	[181]="	Thread Count: 4"
	[182]="	Characteristics:"
	[183]="		64-bit capable"
    )
    nhc_dmi_gather_data
}

plan $((4+8+8+4+7+5+9)) "ww_dmi.nhc" && {
    is "`type -t nhc_dmi_gather_data 2>&1`" 'function' 'nhc_dmi_gather_data() loaded properly'
    is "`type -t nhc_dmi_gather_raw_data 2>&1`" 'function' 'nhc_dmi_gather_raw_data() loaded properly'
    is "`type -t check_dmi_data_match 2>&1`" 'function' 'check_dmi_data_match() loaded properly'
    is "`type -t check_dmi_raw_data_match 2>&1`" 'function' 'check_dmi_raw_data_match() loaded properly'

    # Fake DMI data for testing
    populate_dmi_data

    # Checks against raw data
    check_dmi_raw_data_match "/Core Count: 4/"
    is $? 0 "Positive match test, good data, regexp:  Quad-core CPUs"
    check_dmi_raw_data_match "*Manufacturer*Dell Inc*"
    is $? 0 "Positive match test, good data, glob:  Dell Inc."
    check_dmi_raw_data_match "/Current Speed: 9999 MHz/"
    is $? 1 "Positive match test, bad data, regexp:  9999 MHz"
    check_dmi_raw_data_match "*Height*4 U*"
    is $? 1 "Positive match test, bad data, glob:  Height 4U"
    check_dmi_raw_data_match '!' "/Socket LGA771/"
    is $? 1 "Negative match test, good data, regexp:  Socket LGA771"
    check_dmi_raw_data_match '!' "*3.00GHz*"
    is $? 1 "Negative match test, good data, glob:  3.00GHz"
    check_dmi_raw_data_match '!' "/Intel.*Xeon.*E5-2440/"
    is $? 0 "Negative match test, bad data, regexp:  Intel Xeon E5-2440"
    check_dmi_raw_data_match '!' "*Voltage*9.5 V*"
    is $? 0 "Negative match test, bad data, glob:  9.5 V"

    # Identical checks against cooked data
    check_dmi_data_match "/Core Count: 4/"
    is $? 0 "Positive match test, good data, regexp:  Quad-core CPUs"
    check_dmi_data_match "*Manufacturer*Dell Inc*"
    is $? 0 "Positive match test, good data, glob:  Dell Inc."
    check_dmi_data_match "/Current Speed: 9999 MHz/"
    is $? 1 "Positive match test, bad data, regexp:  9999 MHz"
    check_dmi_data_match "*Height*4 U*"
    is $? 1 "Positive match test, bad data, glob:  Height 4U"
    check_dmi_data_match '!' "/Socket LGA771/"
    is $? 1 "Negative match test, good data, regexp:  Socket LGA771"
    check_dmi_data_match '!' "*3.00GHz*"
    is $? 1 "Negative match test, good data, glob:  3.00GHz"
    check_dmi_data_match '!' "/Intel.*Xeon.*E5-2440/"
    is $? 0 "Negative match test, bad data, regexp:  Intel Xeon E5-2440"
    check_dmi_data_match '!' "*Voltage*9.5 V*"
    is $? 0 "Negative match test, bad data, glob:  9.5 V"

    # Indentation/tagging checks
    check_dmi_data_match "BIOS Information: Version: 2.0.1"
    is $? 0 "Indented content is properly subcategorized and formatted (level 1)"
    check_dmi_data_match "/^Thread Count: 4/"
    is $? 1 "Indented content is properly subcategorized and labeled (level 1)"
    check_dmi_data_match '/^Processor Information: Characteristics: 64-bit capable$/'
    is $? 0 "Indented content is properly subcategorized and formatted (level 2)"
    check_dmi_data_match "BIOS Information: ACPI is supported"
    is $? 1 "Indented content is properly subcategorized and labeled (level 2)"

    # Checks by handle
    check_dmi_data_match -h 0x0000 BIOS Information: ROM Size: 1024 kB
    is $? 0 "Handle-specific positive match on valid data"
    check_dmi_data_match -h 256 "System Information: Product Name: PowerEdge R610"
    is $? 1 "Handle-specific positive match on invalid data"
    check_dmi_data_match -h 0x400 -n '/Family: Pentium/'
    is $? 0 "Handle-specific negative match on invalid data"
    check_dmi_data_match -h 0 -n "/USB legacy is supported/"
    is $? 1 "Handle-specific negative match on valid data"
    check_dmi_data_match -h 0x100 '/L2 Cache Handle/'
    is $? 1 "Handle-specific positive match on valid data from another handle"
    check_dmi_data_match -h 0x401 -n '/Dell Inc/'
    is $? 0 "Handle-specific negative match on valid data from another handle"
    check_dmi_data_match -h 0 '!' '/0xF0000/'
    is $? 1 'Handle-specific match negated via !'

    # Checks by handle ranges
    check_dmi_data_match -h "0x0 0x100 0x200" "/Flags: FPU/"
    is $? 1 "Handle range positive match on valid data outside range"
    check_dmi_data_match -h "0x0 0x100 0x400" "/Flags: FPU/"
    is $? 0 "Handle range positive match on valid data within range"
    check_dmi_data_match -h "0x0 0x100" -n "/External Clock:/"
    is $? 0 "Handle range negative match on valid data outside range"
    check_dmi_data_match -h "0x0 0x100" -n "/Manufacturer: Dell/"
    is $? 1 "Handle range negative match on valid data within range"
    check_dmi_data_match -h '0 256 512' '!' '/2.2.2.2.2.2/'
    is $? 0 'Handle-specific match negated via !'

    # Checks by type
    check_dmi_data_match -t 4 "/Manufacturer: Intel/"
    is $? 0 "Type-specific positive match on valid data, numeric type"
    check_dmi_data_match -t 4 "/Manufacturer: Dell/"
    is $? 1 "Type-specific positive match on invalid data, numeric type"
    check_dmi_data_match -t 1 -n "/Manufacturer: Intel/"
    is $? 0 "Type-specific negative match on valid data, numeric type"
    check_dmi_data_match -t 1 -n "/Manufacturer: Dell/"
    is $? 1 "Type-specific negative match on invalid data, numeric type"
    check_dmi_data_match -t "Base Board Information" "*Product Name: 0TT740"
    is $? 0 "Type-specific positive match on valid data, string type"
    check_dmi_data_match -t "System Information" -n "*UUID: 00000000*"
    is $? 1 "Type-specific negative match on valid data, string type"
    check_dmi_data_match -t "OEM-specific Type" "*0000*"
    is $? 1 "Type-specific positive match on invalid data, string type"
    check_dmi_data_match -t "Processor Information" -n "*Header and Data:"
    is $? 0 "Type-specific negative match on invalid data, string type"
    check_dmi_data_match -t 0 '!' "BIOS Information: Release Date: 01/01/1900"
    is $? 0 'Type-specific match negated via !'

} ; unplan
