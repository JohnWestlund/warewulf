# NHC - Common functions
#
# Michael Jennings <mej@lbl.gov>
# 15 December 2010
#
# $Id: common.nhc 1626 2014-03-21 21:46:45Z mej $
#

PASSWD_DATA_SRC="${PASSWD_DATA_SRC:-/etc/passwd}"

RANGE_MATCH_REGEXP1='^[-a-zA-Z0-9_]+[0-9]+[-\.a-zA-Z0-9]*$'
RANGE_MATCH_REGEXP2='^([-a-zA-Z0-9_]+)\[([0-9]+)\-([0-9]+)\]([-\.a-zA-Z0-9]*)$'

PWUID_USER=( )
PWUID_GID=( )
PWUID_GECOS=( )
PWUID_HOME=( )
PWUID_SHELL=( )

PWDATA_UIDS=( )
PWDATA_USERS=( )
PWDATA_SYSTEM_USERS=( )
PWDATA_USERID_MAP=''

#################### Utility functions ####################
### Add one or more elements to the end of the array named in $1
### Example:  array_push SOMEARRAY "item 1" "item 2" "item 3"
function array_push() {
    local ANAME="$1"
    #local SAVEIFS="$IFS"

    shift
    #IFS='|'
    #dprint "Appending to array $ANAME:  <<$*>>"
    #IFS="$SAVEIFS"
    eval "$ANAME"'=( "${'"$ANAME"'[@]}" "$@" )'
}

### Remove $2 elements (default 1) from the end of array $1 and
### optionally assign to variable $3
### Example:  array_pop SOMEARRAY 3 SOMEVAR
function array_pop() {
    local ANAME="$1" COUNT="$2" VARNAME="$3" END i j
    local -a NEWARRAY

    eval END='$((${#'"$ANAME"'[*]}-1))'
    for ((i=0; i < ${COUNT:-1}; i++)); do
        j=$((END-i))
        eval 'NEWARRAY[$j]="${'"$ANAME"'[$j]}"'
        eval unset "$ANAME"'['"$j"']'
    done
    if [[ -n "$VARNAME" ]]; then
        eval "$VARNAME"'="${NEWARRAY[*]}"'
    fi
}

### Add one or more elements to the beginning of array $1
### Example:  array_unshift SOMEARRAY "item 1" "item 2" "item 3"
function array_unshift() {
    local ANAME="$1"
    #local SAVEIFS="$IFS"

    shift
    #IFS='|'
    #dprint "Appending to array $ANAME:  <<$*>>"
    #IFS="$SAVEIFS"
    eval "$ANAME"'=( "$@" "${'"$ANAME"'[@]}" )'
}

### Remove $2 elements (default 1) from the beginning of array $1
### Example:  array_shift SOMEARRAY 2
function array_shift() {
    local ANAME="$1" COUNT="$2" i

    for ((i=0; i < ${COUNT:-1}; i++)); do
        eval unset "$ANAME"'['"$i"']'
    done
    eval "$ANAME"'=( "${'"$ANAME"'[@]}" )'
}

### Splits the string $2 on separator character $1 and stores in array $3
### Example:  array_split $'\n' "$FILE" LINES
function array_split() {
    local SEP="$1" STR="$2" ANAME="$3"
    local SAVEIFS="$IFS"

    IFS="$SEP"
    eval "$ANAME"'=( '"$STR"' )'
    IFS="$SAVEIFS"
}

### Joins the contents of array $2 using separator character $1
### into optional output variable variable $3
### Example:  array_join ',' FIELDS RESULT
function array_join() {
    local SEP="$1" ANAME="$2" OUTVAR="$3"
    local SAVEIFS="$IFS"

    IFS="$SEP"
    if [[ -n "$OUTVAR" ]]; then
        eval "$OUTVAR"'="${'"$ANAME"'[*]}"'
    else
        eval echo '"${'"$ANAME"'[*]}"'
    fi
    IFS="$SAVEIFS"
}
###########################################################

# Define regexp match check conditionally based on bash version.
if [[ "${BASH_VERSINFO[0]}" != "" && ${BASH_VERSINFO[0]} -ge 3 ]]; then
    # Check to see if parameter ($1) matches regexp ($2)
    function mcheck_regexp() {
        if [[ "$1" =~ $2 ]]; then
            dbg "Regexp match check (internal):  $1 matches /$2/"
            return 0
        else
            dbg "Regexp match check (internal):  $1 does not match /$2/"
            return 1
        fi
    }

    # Check to see if a node range/list ($2) contains a node ($1)
    function mcheck_range() {
        local IFS=','
        local TARGET="$1"
        local RANGELIST="$2"
        local GROUP PREFIX SUFFIX RSTART REND WIDTH NODE i j

        for GROUP in $RANGELIST; do
            if [[ $GROUP =~ $RANGE_MATCH_REGEXP1 ]]; then
                # Check a single node
                if [[ $TARGET == $GROUP ]]; then
                    dbg "$FUNCNAME:  Found $TARGET in $RANGELIST."
                    return 0
                fi
            elif [[ $GROUP =~ $RANGE_MATCH_REGEXP2 ]]; then
                # Check a node range
                PREFIX=${BASH_REMATCH[1]}
                RSTART=${BASH_REMATCH[2]}
                REND=${BASH_REMATCH[3]}
                SUFFIX=${BASH_REMATCH[4]}
                WIDTH=${#RSTART}

                if [[ ${#RSTART} -lt ${#REND} ]]; then
                    dbg "$FUNCNAME:  Node range has mismatched widths of start ($RSTART) and end ($REND).  Using ${#REND}."
                    WIDTH=${#REND}
                fi

                if [[ $RSTART -gt $REND ]]; then
                    dbg "$FUNCNAME:  Node range has range reversed:  start ($RSTART) > end ($REND)."
                    j=$RSTART
                    RSTART=$REND
                    REND=$j
                fi

                for ((i=$RSTART; i <= $REND; i++)); do
                    NODE="$i"
                    while [[ ${#NODE} -lt $WIDTH ]]; do
                        NODE="0$NODE"
                    done
                    NODE="$PREFIX$NODE$SUFFIX"
                    if [[ $TARGET == $NODE ]]; then
                        dbg "$FUNCNAME:  Found $TARGET in $RANGELIST."
                        return 0
                    fi
                done
            else
                # Bad syntax
                log "$FUNCNAME:  Range not in pdsh syntax:  $GROUP"
                return 1
            fi
        done
        dbg "$FUNCNAME:  $TARGET NOT found in $RANGELIST."
        return 1
    }
else
    # Check to see if parameter ($1) matches regexp ($2) using egrep
    function mcheck_regexp() {
        if (echo "$1" | grep -E "$2" >/dev/null 2>&1); then
            dbg "Regexp match check (external):  $1 matches /$2/"
            return 0
        else
            dbg "Regexp match check (external):  $1 does not match /$2/"
            return 1
        fi
    }

    # Check to see if a node range/list ($2) contains a node ($1)
    function mcheck_range() {
        local IFS=','
        local TARGET="$1"
        local RANGELIST="$2"
        local GROUP PREFIX RSTART REND WIDTH NODE i j

        for GROUP in $RANGELIST; do
            if mcheck_regexp "$GROUP" "$RANGE_MATCH_REGEXP1" ; then
                # Check a single node
                if [[ $TARGET == $GROUP ]]; then
                    dbg "$FUNCNAME:  Found $TARGET in $RANGELIST."
                    return 0
                fi
            else
                PREFIX=""
                RSTART=""
                REND=""
                SUFFIX=""
                eval $(echo "$GROUP" | sed -re 's/'"$RANGE_MATCH_REGEXP2"'/PREFIX="\1" RSTART="\2" REND="\3" SUFFIX="\4"/')

                if [[ -n "$PREFIX" || -n "$RSTART" ]]; then
                    # Check a node range
                    WIDTH=${#RSTART}

                    if [[ ${#RSTART} -lt ${#REND} ]]; then
                        dbg "$FUNCNAME:  Node range has mismatched widths of start ($RSTART) and end ($REND).  Using ${#REND}."
                        WIDTH=${#REND}
                    fi

                    if [[ $RSTART -gt $REND ]]; then
                        dbg "$FUNCNAME:  Node range has range reversed:  start ($RSTART) > end ($REND)."
                        j=$RSTART
                        RSTART=$REND
                        REND=$j
                    fi

                    for ((i=$RSTART; i <= $REND; i++)); do
                        NODE="$i"
                        while [[ ${#NODE} -lt $WIDTH ]]; do
                            NODE="0$NODE"
                        done
                        NODE="$PREFIX$NODE$SUFFIX"
                        if [[ $TARGET == $NODE ]]; then
                            dbg "$FUNCNAME:  Found $TARGET in $RANGELIST."
                            return 0
                        fi
                    done
                else
                    # Bad syntax
                    log "$FUNCNAME:  Range not in pdsh syntax:  $GROUP"
                    return 1
                fi
            fi
        done
        dbg "$FUNCNAME:  $TARGET NOT found in $RANGELIST."
        return 1
    }
fi

# Check to see if parameter ($1) matches glob ($2)
function mcheck_glob() {
    case "$1" in
        $2) dbg "Glob match check:  $1 matches $2" ; return 0 ;;
        *)  dbg "Glob match check:  $1 does not match $2" ; return 1 ;;
    esac
}


# Detect regexp match (/.../), range match ({...}), or glob match (no
# slashes or braces), and call the appropriate mcheck_*() function
# above.
function mcheck() {
    local STRING="$1"
    local MATCH="$2"

    # Check to see if the current host matches the check we just read.
    if [[ "${MATCH#/}" != "$MATCH" && "${MATCH%/}" != "$MATCH" ]]; then
        # Regexp match syntax.  Strip slashes, then match.
        MATCH="${MATCH#/}"
        MATCH="${MATCH%/}"
        if mcheck_regexp "$STRING" "$MATCH" ; then
            return 0
        fi
    elif [[ "${MATCH#\{}" != "$MATCH" && "${MATCH%\}}" != "$MATCH" ]]; then
        # pdsh-style node range syntax.  Strip braces, then match.
        MATCH="${MATCH#\{}"
        MATCH="${MATCH%\}}"
        if mcheck_range "$STRING" "$MATCH" ; then
            return 0
        fi
    else
        # Glob match syntax
        if mcheck_glob "$STRING" "$MATCH" ; then
            return 0
        fi
    fi
    return 1
}

# Load configuration file from ($1)
function nhc_load_conf() {
    local CONFFILE="$1"
    local LINE TARGET CHECK

    # Load configuration file and match lines to current hostname.
    dbg "Loading configuration from $CONFFILE."
    while read LINE ; do
        TARGET="${LINE%%||*}"
        CHECK="${LINE#*||}"

        # Trim whitespace.
        while [[ "${TARGET## }" != "${TARGET%% }" ]]; do
            TARGET="${TARGET## }"
            TARGET="${TARGET%% }"
        done
        while [[ "${CHECK## }" != "${CHECK%% }" ]]; do
            CHECK="${CHECK## }"
            CHECK="${CHECK%% }"
        done

        # Skip comments.
        if [[ "${TARGET###}" != "$TARGET" ]]; then
            continue
        fi

        # Skip empty targets or checks.
        test "$TARGET" = "" -o "$CHECK" = "" && continue

        # Check to see if the current host matches the check we just read.
        # If we didn't match, skip to the next line.
        mcheck "$HOSTNAME" "$TARGET" || continue

        # Add the check to our list.
        CHECKS[${#CHECKS[*]}]="$CHECK"
    done < "$CONFFILE"
}

# Parse colon-delimited passwd entry ($1), optionally storing uid in
# variable ($2).
function nhc_common_parse_passwd_entry() {
    local IFS=':'
    local PASSWD_ENTRY="$1"
    local UID_VAR="$2"
    local THIS_UID
    local -a LINE

    LINE=( $PASSWD_ENTRY )
    THIS_UID=${LINE[2]}
    PWDATA_UIDS[${#PWDATA_UIDS[*]}]=$THIS_UID
    PWUID_USER[$THIS_UID]="${LINE[0]}"
    PWUID_GID[$THIS_UID]=${LINE[3]}
    PWUID_GECOS[$THIS_UID]="${LINE[4]}"
    PWUID_HOME[$THIS_UID]="${LINE[5]}"
    PWUID_SHELL[$THIS_UID]="${LINE[6]}"

    PWDATA_USERS[${#PWDATA_USERS[*]}]="${LINE[0]}"
    if [[ $THIS_UID -lt 100 ]]; then
        PWDATA_SYSTEM_USERS[${#PWDATA_SYSTEM_USERS[*]}]="${LINE[0]}"
    fi
    PWDATA_USERID_MAP="$PWDATA_USERID_MAP||${LINE[0]}:$THIS_UID"
    if [[ -n "$UID_VAR" ]]; then
        eval $UID_VAR=$THIS_UID
    fi
}

# Load /etc/passwd data into arrays.
function nhc_common_load_passwd() {
    local PASSWD_ENTRY

    while read PASSWD_ENTRY ; do
        nhc_common_parse_passwd_entry "$PASSWD_ENTRY"
    done < $PASSWD_DATA_SRC
}

# Return UID for specified user ($1) into variable ($2).
function nhc_common_get_uid() {
    local THIS_USERID="$1"
    local THIS_VAR="$2"
    local THIS_UID
    local -a PASSWD_ENTRY

    if mcheck_regexp "$THIS_USERID" '^[0-9]+$' ; then
        # It's already a UID.  Just return it.
        eval $THIS_VAR=$THIS_USERID
        dbg "Got UID ${!THIS_VAR} for user $THIS_USERID"
        return
    fi

    if [[ "$PWDATA_USERID_MAP" = "||" ]]; then
        nhc_common_load_passwd
    fi

    THIS_UID="${PWDATA_USERID_MAP/#*||$THIS_USERID:}"
    THIS_UID="${THIS_UID/%||*}"
    dbg "Got UID $THIS_UID for user $THIS_USERID"

    if [[ -z "$THIS_UID" ]]; then
        # Fall back to getent invocation if passwd data is insufficient.
        nhc_common_parse_passwd_entry "$(getent passwd \"$THIS_USERID\")" THIS_UID
    fi
    eval $THIS_VAR=$THIS_UID
}

# Return userid for specified UID ($1) into variable ($2).
function nhc_common_get_userid() {
    local IFS
    local THIS_UID="$1"
    local THIS_VAR="$2"
    local THIS_USERID
    local -a PASSWD_ENTRY

    if mcheck_regexp "$THIS_UID" '[^0-9]' ; then
        # It's already a userid.  Just return it.
        eval $THIS_VAR=$THIS_UID
        dbg "Got userid ${!THIS_VAR} for UID $THIS_UID"
        return
    fi

    if [[ "$PWDATA_USERID_MAP" = "||" ]]; then
        nhc_common_load_passwd
    fi

    if [[ -n "${PWUID_USER[$THIS_UID]}" ]]; then
        THIS_USERID="${PWUID_USER[$THIS_UID]}"
        dbg "Got userid $THIS_USERID for UID $THIS_UID"
        eval $THIS_VAR=$THIS_USERID
    else
        # Fall back to getent invocation if passwd data is insufficient.
        nhc_common_parse_passwd_entry "$(getent passwd \"$THIS_USERID\")" THIS_UID
        eval $THIS_VAR=${PWUID_USER[$THIS_UID]}
    fi
}

# Convert text representation of size (e.g., nnnMB or nnnG) into a number of kilobytes.
function nhc_common_parse_size() {
    local VAL=$1
    local VAR=$2
    local MULT=${3:-1024}

    if [[ -n "$VAL" ]]; then
        VAL="${VAL/%[bB]}"
        case "$VAL" in
            *k|*K)  VAL=${VAL/%[Kk]} ;;
            *m|*M)  VAL=$((${VAL/%[Mm]}*${MULT})) ;;
            *g|*G)  VAL=$((${VAL/%[Gg]}*${MULT}*${MULT})) ;;
            *t|*T)  VAL=$((${VAL/%[Tt]}*${MULT}*${MULT}*${MULT})) ;;
            *p|*P)  VAL=$((${VAL/%[Pp]}*${MULT}*${MULT}*${MULT}*${MULT})) ;;
            *e|*E)  VAL=$((${VAL/%[Ee]}*${MULT}*${MULT}*${MULT}*${MULT}*${MULT})) ;;
        esac
    fi
    if [[ -n "$VAR" ]]; then
        eval $VAR=$VAL
    fi
}

# Convert number of kilobytes into text representation with suffix (e.g., ${MULT} -> 1MB)
function nhc_common_unparse_size() {
    local VAL=$1
    local VAR=$2
    local MULT=${3:-1024}
    local -a SUFFIXES=( k M G T P E )
    local i

    if [[ -n "$VAL" ]]; then
        for ((i=0; VAL >= ${MULT} && i < ${#SUFFIXES[*]}-1; i++)); do
            ((VAL/=${MULT}))
        done
        VAL="$VAL${SUFFIXES[$i]}B"
    fi
    if [[ -n "$VAR" ]]; then
        eval $VAR='"$VAL"'
    fi
}

# Convert text representation of a suffixed count (e.g., nnnM or nnnG) into an exact number
function nhc_common_parse_count() {
    local VAL=$1
    local VAR=$2
    local MULT=${3:-1000}

    if [[ -n "$VAL" ]]; then
        case "$VAL" in
            *k|*K)  VAL=$((${VAL/%[Kk]}*${MULT})) ;;
            *m|*M)  VAL=$((${VAL/%[Mm]}*${MULT}*${MULT})) ;;
            *g|*G)  VAL=$((${VAL/%[Gg]}*${MULT}*${MULT}*${MULT})) ;;
            *t|*T)  VAL=$((${VAL/%[Tt]}*${MULT}*${MULT}*${MULT}*${MULT})) ;;
            *p|*P)  VAL=$((${VAL/%[Pp]}*${MULT}*${MULT}*${MULT}*${MULT}*${MULT})) ;;
            *e|*E)  VAL=$((${VAL/%[Ee]}*${MULT}*${MULT}*${MULT}*${MULT}*${MULT}*${MULT})) ;;
        esac
    fi
    if [[ -n "$VAR" ]]; then
        eval $VAR=$VAL
    fi
}

# Convert number of kilobytes into text representation with suffix (e.g., ${MULT} -> 1MB)
function nhc_common_unparse_count() {
    local VAL=$1
    local VAR=$2
    local MULT=${3:-1000}
    local -a SUFFIXES=( [0]='' [1]=k M G T P E )
    local i

    if [[ -n "$VAL" ]]; then
        for ((i=0; VAL >= ${MULT} && i < ${#SUFFIXES[*]}; i++)); do
            ((VAL/=${MULT}))
        done
        VAL="$VAL${SUFFIXES[$i]}"
    fi
    if [[ -n "$VAR" ]]; then
        eval $VAR='"$VAL"'
    fi
}

# Aliases for backward compatibility, just in case
#function nhc_fs_parse_count { nhc_common_parse_count "$@" }
#function nhc_fs_unparse_count { nhc_common_unparse_count "$@" }

# Convert the built-in bash variable $SECONDS to the current UNIX time.
function nhc_common_get_unix_time() {
    local NOW

    if [[ $SECONDS -lt 946684800 ]]; then
        NOW=$(date '+%s')
        ELAPSED_SECONDS=$SECONDS
        SECONDS=$((ELAPSED_SECONDS+NOW))
        NHC_START_TS=$((NOW-ELAPSED_SECONDS))
    fi
}

# Run a subcommand with a timeout
function nhc_cmd_with_timeout() {
    local RET

    export NHC_TO="$1"
    shift
    #exec 3>&2 2>/dev/null
    $SHELL -c '( for ((s=NHC_TO; s>0; s--)); do sleep 1 ; kill -0 $$ || exit 0 ; done ; kill -s SIGTERM $$ && kill -0 $$ || exit 0 ; sleep 1 ; kill -s SIGKILL $$ ) >&/dev/null & exec "$@"' $1 "$@"
    RET=$?
    #exec 2>&3 3>&-
    return $RET
}
