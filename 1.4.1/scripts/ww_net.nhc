# NHC - Warewulf Networking/Socket Checks
#
# Michael Jennings <mej@lbl.gov>
# 12 September 2014
#
# $Id$
#

NETSTAT_CMD="${NETSTAT_CMD:-netstat}"
NETSTAT_ARGS="${NETSTAT_ARGS:--Tanpee -A inet,inet6,unix}"
SS_CMD="${SS_CMD:-ss}"
SS_ARGS="${SS_ARGS:--anpee -A inet,unix}"

NET_PROTO=( )
NET_LOCADDR=( )
NET_RMTADDR=( )
NET_TYPE=( )
NET_STATE=( )
NET_USER=( )
NET_UID=( )
NET_PROCPID=( )
NET_PROCNAME=( )

function nhc_sockets_gather_data() {
    local IFS NET_DATA THIS_PID i j CNT=0
    local -a LINES LINE

    # We need passwd data to resolve UIDs for users
    if [[ ${#PWDATA_USERS[*]} -eq 0 ]]; then
        nhc_common_load_passwd
    fi

    # Make sure we have "netstat" available before we try to run it.
    if type -t "$NETSTAT_CMD" >&/dev/null ; then
        dbg "Gathering socket data using $NETSTAT_CMD $NETSTAT_ARGS..."
        # Create array $LINES[] by splitting output on newlines.
        IFS=$'\n'
        LINES=( $(eval ${NETSTAT_CMD} ${NETSTAT_ARGS} 2>/dev/null) )
        IFS=$' \t\n'

        # Iterate through $LINES[] array to gather process data.
        for ((i=0; i<${#LINES[*]}; i++)); do
            # Split each line on whitespace to create $LINE[] array.
            LINE=( ${LINES[$i]} )
            if [[ "${LINE[0]}" == "Active" || "${LINE[0]}" == "Proto" ]]; then
                continue
            fi
            NET_PROTO[$CNT]=${LINE[0]}
            if [[ "${NET_PROTO[$CNT]}" == "udp" ]]; then
                NET_LOCADDR[$CNT]=${LINE[3]}
                NET_RMTADDR[$CNT]=${LINE[4]}
                NET_UID[$CNT]=${LINE[5]}
                NET_PROCNAME[$CNT]=${LINE[7]}
            elif [[ "${NET_PROTO[$CNT]}" == "unix" ]]; then
                for ((j=4; j<${#LINE[*]}; j++)); do
                    if [[ "${LINE[$j]}" == "DGRAM" || "${LINE[$j]}" == "STREAM" || "${LINE[$j]}" == "RAW" || "${LINE[$j]}" == "RDM" || "${LINE[$j]}" == "SEQPACKET" || "${LINE[$j]}" == "PACKET" || "${LINE[$j]}" == "UNKNOWN" ]]; then
                        NET_TYPE[$CNT]=${LINE[$((j++))]}
                        if [[ -z "${LINE[$j]//[0-9]}" ]]; then
                            # All-numeric; must be an inode number, which means no state.
                            NET_PROCNAME[$CNT]=${LINE[$((++j))]}
                            NET_LOCADDR[$CNT]=${LINE[$((++j))]}
                        else
                            NET_STATE[$CNT]=${LINE[$((j++))]}
                            NET_PROCNAME[$CNT]=${LINE[$((++j))]}
                            NET_LOCADDR[$CNT]=${LINE[$((++j))]}
                        fi
                    fi
                done
            else
                # TCP or RAW
                NET_LOCADDR[$CNT]=${LINE[3]}
                NET_RMTADDR[$CNT]=${LINE[4]}
                NET_STATE[$CNT]=${LINE[5]}
                NET_UID[$CNT]=${LINE[6]}
                NET_PROCNAME[$CNT]=${LINE[8]}
            fi
            if [[ -n "${NET_UID[$CNT]}" ]]; then
                nhc_common_get_userid "${NET_UID[$CNT]}" "NET_USER[$CNT]"
            fi
            if [[ -n "${NET_PROCNAME[$CNT]}" && "${NET_PROCNAME[$CNT]//\/}" != "${NET_PROCNAME[$CNT]}" ]]; then
                NET_PROCPID[$CNT]="${NET_PROCNAME[$CNT]%%/*}"
                NET_PROCNAME[$CNT]="${NET_PROCNAME[$CNT]##*/}"
            else
                NET_PROCPID[$CNT]="0"
                NET_PROCNAME[$CNT]="unknown"
            fi
            NET_STR[$CNT]="${NET_PROTO[$CNT]}${NET_TYPE[$CNT]:+.${NET_TYPE[$CNT]}}/${NET_USER[$CNT]:+${NET_USER[$CNT]}[${NET_UID[$CNT]}]/}${NET_PROCNAME[$CNT]}[${NET_PROCPID[$CNT]}]:  ${NET_LOCADDR[$CNT]}${NET_RMTADDR[$CNT]:+ -> ${NET_RMTADDR[$CNT]}}${NET_STATE[$CNT]:+ (${NET_STATE[$CNT]})}"
            dbg "Got socket $CNT:  ${NET_STR[$CNT]}"
            ((CNT++))
        done
    elif type -t "$SS_CMD" >&/dev/null ; then
        dbg "Gathering socket data using $SS_CMD $SS_ARGS..."
        # Create array $LINES[] by splitting output on newlines.
        IFS=$'\n'
        LINES=( $(eval ${SS_CMD} ${SS_ARGS} 2>/dev/null) )
        IFS=$' \t\n'

        # Iterate through $LINES[] array to gather process data.
        for ((i=0; i<${#LINES[*]}; i++)); do
            #dbg "Parsing line:  ${LINES[$i]}"
            # Split each line on whitespace to create $LINE[] array.  The following
            # temporary substitution is necessary to avoid bash expanding * to
            # filenames from the current directory.  FIXME:  Anyone know a better way?
            LINE=( ${LINES[$i]//\*/\\\*} )
            LINE=( "${LINE[@]//\\}" )
            if [[ "${LINE[0]}" == "Netid" ]]; then
                continue
            fi
            NET_PROTO[$CNT]=${LINE[0]}
            NET_STATE[$CNT]=${LINE[1]}
            NET_LOCADDR[$CNT]="${LINE[4]}"
            if [[ "${NET_PROTO[$CNT]}" == "u_str" ]]; then
                NET_PROTO[$CNT]="unix"
                NET_TYPE[$CNT]="STREAM"
                NET_PROCNAME[$CNT]="${LINE[8]}"
            elif [[ "${NET_PROTO[$CNT]}" == "u_dgr" ]]; then
                NET_PROTO[$CNT]="unix"
                NET_TYPE[$CNT]="DGRAM"
                NET_PROCNAME[$CNT]="${LINE[8]}"
            else
                # TCP, UDP, RAW
                NET_RMTADDR[$CNT]="${LINE[5]}"
                for ((j=6; j<${#LINE[*]}; j++)); do
                    if [[ "${LINE[$j]/#users:}" != "${LINE[$j]}" ]]; then
                        NET_PROCNAME[$CNT]="${LINE[$j]}"
                    elif [[ "${LINE[$j]/#uid[:=]}" != "${LINE[$j]}" ]]; then
                        NET_UID[$CNT]="${LINE[$j]##uid[:=]}"
                    fi
                done
            fi
            if [[ "${NET_STATE[$CNT]}" == "ESTAB" ]]; then
                NET_STATE[$CNT]="ESTABLISHED"
            fi
            if [[ -n "${NET_PROCNAME[$CNT]}" ]]; then
                NET_PROCNAME[$CNT]="${NET_PROCNAME[$CNT]/#users:\(\(\"}"
                NET_PROCPID[$CNT]="${NET_PROCNAME[$CNT]/#*\",}"
                NET_PROCNAME[$CNT]="${NET_PROCNAME[$CNT]/%\",*}"
                NET_PROCPID[$CNT]="${NET_PROCPID[$CNT]/%,*}"
            else
                NET_PROCPID[$CNT]="0"
                NET_PROCNAME[$CNT]="unknown"
            fi
            if [[ -n "${NET_UID[$CNT]}" ]]; then
                nhc_common_get_userid "${NET_UID[$CNT]}" "NET_USER[$CNT]"
            fi
            NET_STR[$CNT]="${NET_PROTO[$CNT]}${NET_TYPE[$CNT]:+.${NET_TYPE[$CNT]}}/${NET_USER[$CNT]:+${NET_USER[$CNT]}[${NET_UID[$CNT]}]/}${NET_PROCNAME[$CNT]}[${NET_PROCPID[$CNT]}]:  ${NET_LOCADDR[$CNT]}${NET_RMTADDR[$CNT]:+ -> ${NET_RMTADDR[$CNT]}}${NET_STATE[$CNT]:+ (${NET_STATE[$CNT]})}"
            dbg "Got socket $CNT:  ${NET_STR[$CNT]}"
            ((CNT++))
        done
    else
        dbg "Neither $NETSTAT_CMD nor $SS_CMD found.  Unable to gather socket data."
        return 1
    fi
    return 0
}

# Check for presence of socket matching given address, port, program, target, and/or state.  Syntax:
#  check_net_socket [-0] [-a] [-!] [-n <name>] [-p <proto>] [-s <state>] [-l <locaddr>[:<locport>]]
#                   [-r <rmtaddr>[:<rmtport>]] [-t <type>] [-u <user>] [-d <daemon>] [-e <action>] [-E <found_action>]
function check_net_socket() {
    local NONFATAL=0 ALL=0 NEGATE=0 DAEMON NAME LOCADDR PROTO RMTADDR STATE
    local TYPE OWNER ACTION FOUND_ACTION MATCH FIELD DESC
    local i j MATCH_CNT=0 MSG="" SEEK_STR="" MATCH_STR="" FIELDS=""
    local -a MATCH_DESC
    local -a FIELD_LIST=( "PROTO" "LOCADDR" "RMTADDR" "STATE" "TYPE" "USER" "PROCNAME" )
    local -a VAR_LIST=( "PROTO" "LOCADDR" "RMTADDR" "STATE" "TYPE" "OWNER" "DAEMON" )
    local -a DESC_LIST=( "protocol" "localaddr" "remoteaddr" "state" "type" "user" "daemon" )

    if [[ ${#NET_PROTO[*]} -eq 0 ]]; then
        nhc_sockets_gather_data
    fi

    OPTIND=1
    while getopts ":!0ad:l:n:p:r:s:t:u:e:E:" OPTION ; do
        case "$OPTION" in
            !) NEGATE=1 ;;
            0) NONFATAL=1 ;;
            a) ALL=1 ;;
            d) DAEMON="$OPTARG" ;;
            l) LOCADDR="$OPTARG" ;;
            n) NAME="$OPTARG" ;;
            p) PROTO="$OPTARG" ;;
            r) RMTADDR="$OPTARG" ;;
            s) STATE="$OPTARG" ;;
            t) TYPE="$OPTARG" ;;
            u) OWNER="$OPTARG" ;;
            e) ACTION="$OPTARG" ;;
            E) FOUND_ACTION="$OPTARG" ;;
            :) die 1 "$FUNCNAME:  Option -$OPTARG requires an argument." ; return 1 ;;
            \?) die 1 "$FUNCNAME:  Invalid option:  -$OPTARG" ; return 1 ;;
        esac
    done
    shift $((OPTIND-1))
    if [[ -n "$*" ]]; then
        # Make sure the user didn't pass any additional parameters expecting them to do something.
        die 1 "$FUNCNAME:  Syntax error:  Unsupported additional arguments supplied (\"$*\")."
        return 1
    fi

    # Build a user-readable string describing the matching criteria we're using for the socket search.
    for ((j=0; j < ${#VAR_LIST[*]}; j++)); do
        # The below eval equates to:
        #[[ -n "$<varname>" ]] && MATCH_DESC[${#MATCH_DESC[*]}]="(<descriptive_name> =~ \"$<varname>\")" || <varname>=""
        eval '[[ -n "$'"${VAR_LIST[$j]}"'" ]] && FIELDS="$FIELDS $j" && MATCH_DESC[${#MATCH_DESC[*]}]="('"${DESC_LIST[$j]}"' =~ \"$'"${VAR_LIST[$j]}"'\")"'
        # We unset the value of VAR_LIST[$j] if we weren't asked to match on that field
        # because it allows us to short-circuit the loop below.
    done
    if [[ ${#MATCH_DESC[*]} -eq 0 ]]; then
        die 1 "$FUNCNAME:  No match criteria supplied."
        return 1
    else
        array_join ' && ' MATCH_DESC SEEK_STR
    fi
    if [[ $ALL -eq 1 ]]; then
        SEEK_STR="$SEEK_STR (all)"
    fi
    if [[ $NONFATAL -eq 1 ]]; then
        SEEK_STR="$SEEK_STR (non-fatal)"
    fi
    if [[ $NEGATE -eq 1 ]]; then
        SEEK_STR="$SEEK_STR (NEGATED)"
    fi

    # Look through all our sockets for the one we need.
    dbg "Looking for ${NAME:+$NAME }sockets:  $SEEK_STR"
    for ((i=0; i < ${#NET_PROTO[*]}; i++)); do
        unset MATCH_DESC
        for j in $FIELDS ; do
            # Compare each field against the match expressions we've been given.
            eval 'MATCH="$'"${VAR_LIST[$j]}"'" DESC="'"${DESC_LIST[$j]}"'" FIELD="${NET_'"${FIELD_LIST[$j]}"'[$i]}"'
            if [[ "${MATCH/#\!}" != "$MATCH" ]]; then
                # Match string begins with !.  Negate the match.
                if mcheck "$FIELD" "${MATCH/#\!}" ; then
                    continue 2
                fi
            elif ! mcheck "$FIELD" "$MATCH" ; then
                continue 2
            fi
            MATCH_DESC[${#MATCH_DESC[*]}]="$DESC($FIELD)"
        done

        ### If we get here, all pieces of information provided have matched successfully.
        ((MATCH_CNT++))
        array_join '+' MATCH_DESC MATCH_STR
        dbg "Found matching socket #${MATCH_CNT}:  ${NET_STR[$i]} [[$MATCH_STR]]"
        if [[ $ALL -eq 0 ]]; then
            # We don't have to look for any more matches.
            if [[ $NEGATE -eq 0 ]]; then
                # 1 match is all we need.  The check passes.
                return 0
            fi
            break
        fi
    done

    # Fire off any actions necessary.
    if [[ $MATCH_CNT -eq 0 && -n "$ACTION" ]]; then
        ${SHELL:-/bin/bash} -c "$ACTION" &
    elif [[ $MATCH_CNT -ge 1 && -n "$FOUND_ACTION" ]]; then
        ${SHELL:-/bin/bash} -c "$FOUND_ACTION" &
    fi

    if [[ $MATCH_CNT -eq 0 && $NEGATE -eq 0 ]]; then
        # No matches found.  That's bad.
        MSG="$FUNCNAME:  No ${NAME:-matching} sockets found ($SEEK_STR)"
        if [[ $NONFATAL -eq 1 ]]; then
            log "$MSG (non-fatal)"
        else
            die 1 "$MSG"
            return 1
        fi
    elif [[ $MATCH_CNT -gt 0 && $NEGATE -eq 1 ]]; then
        # -! means finding a match is bad.  Die now.
        MSG="$FUNCNAME:  $MATCH_CNT ${NAME:-matching} socket(s) found ($SEEK_STR)"
        if [[ $NONFATAL -eq 1 ]]; then
            log "$MSG (non-fatal)"
        else
            die $MATCH_CNT "$MSG"
            return $MATCH_CNT
        fi
    else
        dbg "Found $MATCH_CNT matching sockets."
    fi
    return 0
}
