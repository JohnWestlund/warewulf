# Copyright (c) 2001-2003 Gregory M. Kurtzer
#
# Copyright (c) 2003-2013, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
#
#########################
## Copyright (c) 2013, Intel(R) Corporation #{
##
## Redistribution and use in source and binary forms, with or without 
## modification, are permitted provided that the following conditions are met:
##
##    * Redistributions of source code must retain the above copyright notice, 
##      this list of conditions and the following disclaimer.
##    * Redistributions in binary form must reproduce the above copyright 
##      notice, this list of conditions and the following disclaimer in the 
##      documentation and/or other materials provided with the distribution.
##    * Neither the name of Intel(R) Corporation nor the names of its 
##      contributors may be used to endorse or promote products derived from 
##      this software without specific prior written permission.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
## AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
## ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
## LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
## POSSIBILITY OF SUCH DAMAGE.
#########################}
##
# $Id$
#

package Warewulf::Event::CLCK_Nodelist;

use Warewulf::Event;
use Warewulf::EventHandler;
use Warewulf::Logger;
use Warewulf::RetVal;
use Warewulf::DataStore;
use Warewulf::Node;
use Warewulf::Util;
use File::Path;

my $event = Warewulf::EventHandler->new();
# Default nodes list file search path for Intel(R) Cluster Checker
my $nodelistdir = "/etc/intel/clck/";
# Default nodes list file name for Intel(R) Cluster Checker
my $nodelist = "$nodelistdir/nodelist"; 
my $ok = 0;

# Function to update the nodes list file that Intel(R) Cluster Checker uses 
# by default. Include the head node, the compute nodes and Intel(R) Xeon 
# Phi(TM) cards if available. 
sub update_nodelist()
{
    use Sys::Hostname;
    my $head_node = hostname;
    my $datastore = Warewulf::DataStore->new();
    my $nodeSet = $datastore->get_objects("node");

    # Start the nodes list file wiht the head node
    my $nodes = "### Content generated by CLCK_Nodelist Warewulf".
    " event module.\n" . "### All manual editions will be lost\n\n";

    $nodes .= sprintf("%-35s %s\n", $head_node, '#type: head');

    foreach my $n ($nodeSet->get_list()) {
        my $compute = $n->nodename();
        my $domain =  $n->domain();

        # Set the correct format for the domain
        if (defined $domain){
            $domain = ".$domain";
        }
        else{
            $domain = '';
        }

        $nodes .= sprintf("%-35s %s\n", "$compute$domain", '#type: compute');

        foreach my $devname ($n->netdevs_list()) {
            # Skip net devices that are not mic
            if ($devname !~ m/.*mic\d+/) {
                next;
            }
            
            # Sanity check, the MIC card must have an IP assigned. 
            my $node_ipaddr = $n->ipaddr($devname);
            if (not $node_ipaddr) {
                &dprint("Skipping $devname as it has no defined IPADDR\n");
                next;
            }

            $nodes .= sprintf("%-35s %s\n", "$compute-$devname$domain",
            '#type: knc-compute');
        }
    }

    # Dump the nodes list into the file
    if (open(NODELIST, "> $nodelist")) {
        print NODELIST $nodes;
        if (not close(NODELIST)) {
            &eprint("Could not write file: $nodelist\n");
            return &ret_failure();
        }
    } else {
        &eprint("Could not open file for writing: $nodelist\n");
        return &ret_failure();
    }

    return &ret_success();
}

# Only update if called by root
if (not &uid_test(0)) {
    return &ret_failure();
}

# Initialization
if (not -d $nodelistdir) {
    if (mkpath($nodelistdir)) {
        $ok = 1;
    } else {
        &eprint("Could not make path: $nodelistdir\n");
    }
} else {
    $ok = 1;
}

# Only register if the destination path is available
if ($ok) {
    $event->register("node.delete", \&update_nodelist);
    $event->register("node.modify", \&update_nodelist);
}

&update_nodelist();

1;
